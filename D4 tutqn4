#include <stdio.h>
#include <stdlib.h>

struct node *head;
struct node *rear;
struct node {
    int data;
    struct node *next;
};

void print (struct node* new_head){
    if (new_head == NULL)
        return;
    printf("'%d' ", new_head->data);
    print(new_head->next); //Recursive function
}

void enqueue(int x){
    struct node *temp = (struct node*)malloc(sizeof(struct node)); //Dynamic allocation of new struct node.
        temp->next = NULL;
        temp->data = x;
    if (head == NULL){ //For the case that there is nothing within the queue.
        head = temp;
        rear = temp; //Point both head and rear to the new node
        return;
    }
    rear->next = temp;
    rear = temp;
}
void dequeue(){
    struct node *temp = head;
    if (head==NULL){ //Returns
        printf("Nothing to dequeue in ");
        return;
    }
    else if (head->next == NULL) {
        head = NULL;
        rear = NULL;
    }
    else
        head = head->next;
    free(temp);
}

main () {
    int userinput;
    int int1;
    head = NULL;
    rear = NULL;
    printf("1: Insert integer to queue.\n");
    printf("2: Remove integer from queue.\n");
    printf("3: Quit.\n");
    do {
        scanf("%d", &userinput);
        fflush(stdin);
    switch (userinput) {
    case 1:
        printf("Please input an integer: ");
        scanf("%d", &int1);
        fflush(stdin);
        enqueue(int1);
        printf("Queue: ");
        print(head);
        puts("");
        break;
    case 2:
        dequeue();
        printf("Queue: ");
        print(head);
        puts("");
        break;
    case 3:
        printf("Program is terminating...\n");
        break;
    default:
        printf("Please input 1-3.\n");
        break;
        }
    } while (userinput != 3);
    return 0;
}
